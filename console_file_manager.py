"""
ЗАДАНИЕ 2
5. В программе консольный файловый менеджер есть пункт
   "просмотр содержимого рабочей директории";
6. Добавить пункт "сохранить содержимое рабочей директории в файл";

7. При выборе этого пункта создать файл listdir.txt (если он есть,
   то пересоздать) и сохранить туда содержимое рабочей
   директории следующим образом: сначала все файлы, потом все папки.
   Пример как может выглядеть итоговый файл:
     files: victory.py, bill.py, main.py
     dirs: modules, packages


В задании к уроку 11 "Модули и пакеты" написано:
1. Создать новый проект "Консольный файловый менеджер"
2. В проекте реализовать следующий функционал:
После запуска программы пользователь видит меню, состоящее из следующих пунктов:
- создать папку;
- удалить (файл/папку);
- копировать (файл/папку);
- просмотр содержимого рабочей директории;
- посмотреть только папки;
- посмотреть только файлы;
- просмотр информации об операционной системе;
- создатель программы;
- играть в викторину;
- мой банковский счет;
- смена рабочей директории (*необязательный пункт);
- выход.
Так же можно добавить любой дополнительный функционал по желанию.

Описание пунктов:
- создать папку
после выбора пользователь вводит название папки, создаем её в рабочей директории;
- удалить (файл/папку)
после выбора пользователь вводит название папки или файла, удаляем из рабочей директории если такой есть;
- копировать (файл/папку)
после выбора пользователь вводит название папки/файла и новое название папки/файла. Копируем;
- просмотр содержимого рабочей директории
вывод всех объектов в рабочей папке;
- посмотреть только папки
вывод только папок которые находятся в рабочей папке;
- посмотреть только файлы
вывод только файлов которые находятся в рабочей папке;
- просмотр информации об операционной системе
вывести информацию об операционной системе (можно использовать пример из 1-го урока);
- создатель программы
вывод информации о создателе программы;
- играть в викторину
запуск игры викторина из предыдущего дз;
- мой банковский счет
запуск программы для работы с банковским счетом из предыдущего дз (задание учебное, после выхода из программы управлением счетом в главной программе сумму и историю покупок можно не запоминать);
- смена рабочей директории (*необязательный пункт)
усложненное задание пользователь вводит полный /home/user/... или относительный user/my/... путь. Меняем рабочую директорию на ту что ввели и работаем уже в ней;
- выход
выход из программы.
Так же можно добавить любой другой интересный или полезный функционал по своему желанию
После выполнения какого либо из пунктов снова возвращаемся в меню, пока пользователь не выберет выход

"""
import json
from os.path import isfile

from lesson09_m04_victory import quiz
from personal_account import personal_account

import os         # Интерфейсы операционной системы
import shutil     # операции над файлами/каталогами
import platform   # информация о компьютере и  о системе
import sys        # Параметры и функции конфигурации Python


def show_dir(show=True):
    # выборка только папок которые находятся в рабочей папке;
    lst_name = []
    with os.scandir(os.getcwd()) as files:
        for file in files:
            if os.path.isdir(file):
                if show:
                    print('   ', file.name)
                else:
                    lst_name.append(file.name)
    return lst_name

def show_file(show=True):
    # выборка только файлов которые находятся в рабочей папке;
    lst_name = []
    with os.scandir(os.getcwd()) as files:
        for file in files:
            if os.path.isfile(file):
                if show:
                    print('   ', file.name)
                else:
                    lst_name.append(file.name)
    return lst_name

print('\n\nВнимание!!!\nВводить цифры требуется только целые,\n' +
      'проверка корректности ввода не производится!\n')

while True:
    print(' 1. создать папку')
    print(' 2. удалить (файл/папку)')
    print(' 3. копировать (файл/папку)')
    print(' 4. просмотр содержимого рабочей директории')
    print(' 5. посмотреть только папки')
    print(' 6. посмотреть только файлы')
    print(' 7. просмотр информации об операционной системе')
    print(' 8. создатель программы')
    print(' 9. играть в викторину')
    print('10. мой банковский счет')
    print('11. смена рабочей директории')
    print('12. сохранить содержимое рабочей директории в файл')
    print('13. выход')

    choice = input('Выберите пункт меню: ')
    if choice == '1':
        # 1. создать папку.
        # после выбора пользователь вводит название папки, создаем её в рабочей директории
        folder_name = input('   Введите имя создаваемой папки: ')
        if not os.path.exists(folder_name):
            # Проверяем, имеется файл или папка с таким наименованием
            os.mkdir(folder_name)  # создать папку передаем путь
            print(f'   Создана папка {folder_name}')
            continue  # Переходим к выбору действия
        print(f'   Уже существует папка или файл с именем {folder_name}.\n   Операция отменена.')
    elif choice == '2':
        # 2. удалить (файл/папку).
        # после выбора пользователь вводит название папки или файла, удаляем из рабочей директории если такой есть;
        f_name = input('   Введите имя удаляемой папки/файла: ')
        # Проверяем, имеется файл или папка с таким наименованием
        if os.path.exists(f_name):
            # удалить папку
            if os.path.isdir(f_name):
                # каталог существует
                try:
                    os.rmdir(f_name)
                except OSError:
                    # Исключение OSError поднимается,
                    # когда каталог не является пустым каталогом.
                    print(f'   Папка с именем {f_name} не пустая.')
                    if input('   Удалить папку со всем содержимым (д - да)?') == 'д':
                        # Удаляем текущую директорию и её всё содержимое
                        shutil.rmtree(f_name)
                        print(f'   Папка с именем {f_name} удалена.')
                    else:
                        print('   Удаление отменено.')
                    continue  # Переходим к выбору действия
                # Оператор try закончился
                print(f'   Папка с именем {f_name} удалена.')
                continue  # Переходим к выбору действия
             # удалить файл
            if os.path.isfile(f_name):
                # файл существует
                os.remove(f_name)
                print(f'   Файл с именем {f_name} удалён.')
                continue  # Переходим к выбору действия
        print(f'   отсутствует папка/файл с именем {f_name}.')
    elif choice == '3':
        # 3. копировать (файл/папку).
        # после выбора пользователь вводит название папки/файла и новое название папки/файла. Копируем;
        print('   операция копирования папки/файла')
        f_name_src = input('   Введите имя исходной(-ого) папки/файла: ')
        f_name_dst = input('   Введите имя итоговой(-ого) папки/файла: ')
        if os.path.isdir(f_name_src):
            # надо копировать каталог
            shutil.copytree(f_name_src, f_name_dst)
            print(f'   Папка с именем {f_name_src} скопирована в {f_name_dst}.')
            continue  # Переходим к выбору действия

        if os.path.isfile(f_name_src):
            shutil.copy(f_name_src, f_name_dst)
            print(f'   Файл с именем {f_name_src} скопирован в {f_name_dst}.')
            continue  # Переходим к выбору действия
        print(f'   Отсутствует файл/папка с именем {f_name_src}.\nОперация не выполнена')
        # continue  # Переходим к выбору действия
    elif choice == '4':
        # 4. просмотр содержимого рабочей директории.
        # вывод всех объектов в рабочей папке;
        # список файлов и папок
        print('   Просмотр содержимого рабочей директории - список файлов и папок')
        print(sorted(os.listdir()))
        # print(os.listdir())
        # continue  # Переходим к выбору действия
    elif choice == '5':
        # 5. посмотреть только папки
        # вывод только папок которые находятся в рабочей папке;
        print('   Просмотр содержимого рабочей директории - только папки')
        show_dir()
        # continue  # Переходим к выбору действия
    elif choice == '6':
        # 6. посмотреть только файлы
        # вывод только файлов которые находятся в рабочей папке;
        print('   Просмотр содержимого рабочей директории - только файлы')
        show_file()
        # continue  # Переходим к выбору действия
    elif choice == '7':
        # 7. просмотр информации об операционной системе
        # вывести информацию об операционной системе
        # (можно использовать пример из 1-го урока);
        print('   идентификатор платформы:', sys.platform)
        print('   имя операционной системы:', platform.system())
        print('   базовая платформа:', platform.platform())
        print('   выпуск системы:', platform.release())
        print('   версия выпуска системы:', platform.version())
        print('   тип машины:', platform.machine())
        print('   сетевое имя компьютера (может быть не полностью):', platform.node())
        print('   реальное имя процессора:', platform.processor())
        print('   номер и дата сборки Python:', platform.python_build())
        print('   компилятор, используемый для компиляции Python:', platform.python_compiler())
        # continue  # Переходим к выбору действия
    elif choice == '8':
        # 8. создатель программы
        # вывод информации о создателе программы;
        print('   Создатель программы:')
        print('   Тут выводится информация о создателе программы')
        print('   (ФИО, эл.адрес, телефон и прочее).')
        # continue  # Переходим к выбору действия
    elif choice == '9':
        # 9. играть в викторину
        # запуск игры викторина из предыдущего дз;
        quiz()
        # continue  # Переходим к выбору действия
    elif choice == '10':
        # 10. мой банковский счет
        # запуск программы для работы с банковским счетом
        # из предыдущего дз (задание учебное, после выхода
        # из программы управлением счетом в главной программе
        # сумму и историю покупок можно не запоминать);

        # Проверяем, что существует файл с историей.
        if isfile('data_json.txt'):
            # Если файл с историей существует, то историю загружаем.
            # Корректность данных не проверяем
            with open('data_json.txt', 'r') as f:
                account, account_lst, history_lst = json.load(f)
            print('Файл с историей загружен.')
        else:
            # Если файл с историей отсутстует, то
            # инициируем переменные нулевыми значениями.
            account = 0  # Исходное состояние счёта
            account_lst = []  # Список хранит историю поступлений и списаний со счёта.
            history_lst = []  # Список хранит историю покупок.
            # Будет храниться в виде кортежей (название покупки, сумма покупки).
            # То есть, итоговый список с историей будет примерно такой:
            # [('Наименование1', 100), ('Наименование2', 200)]

        account, account_lst, history_lst = personal_account(account=account,
                                                             account_lst=account_lst,
                                                             history_lst=history_lst)
        # Сохранение истории в файл
        with open('data_json.txt', 'w') as f:
            json.dump((account, account_lst, history_lst), f)
        # continue  # Переходим к выбору действия
    elif choice == '11':
        # 11. смена рабочей директории
        # усложненное задание пользователь вводит полный /home/user/...
        # или относительный user/my/... путь. Меняем рабочую директорию
        # на ту что ввели и работаем уже в ней;
        print('   Текущий рабочий каталог:', os.getcwd())
        f_name = input('   Введите имя каталога, который должен ' +
                       'стать новым текущим каталогом: ')
        if os.path.isdir(f_name):
            try:
                os.chdir(f_name)
                # Эта функция может вызывать исключение OSError и подклассы,
                # такие как FileNotFoundError, PermissionError и NotADirectoryError.
                # Ошибки FileNotFoundError, NotADirectoryError отсекаются проверкой
                # if os.path.isdir(f_name).
                # Поэтому остаётся проверить только PermissionError
                print('   Новый текущий рабочий каталог:', os.getcwd())
                continue  # Переходим к выбору действия
            # except FileNotFoundError:
            # except NotADirectoryError:
            except PermissionError:
                # Исключение PermissionError поднимается при попытке запустить
                # операцию без соответствующих прав доступа - например, прав
                # доступа к файловой системе
                print(f'   Нет соответствующих прав доступа для перехода на {f_name}')
        else:
            print('   Введённое имя не является каталогом.')
        print('   Ошибка при смене каталога. Операция не выполнена')
    elif choice == '12':
        # 12. сохранить содержимое рабочей директории в файл
        # выход из программы.

        lst_dir = show_dir(show=False)
        lst_file = show_file(show=False)
        data = 'files:'
        sep_str = ' '
        for i in lst_file:
            data += sep_str + i
            sep_str = ', '
        data += '\ndirs:'
        sep_str = ' '
        for i in lst_dir:
            data += sep_str + i
            sep_str = ', '
        # Сохранение в файл
        with open('data_files-dirs_json.txt', 'w') as f:
            f.write(data)
    elif choice == '13':
        # 13. выход
        # выход из программы.
        print('   выход из программы')
        break
    else:
        print('   Неверный пункт меню')

